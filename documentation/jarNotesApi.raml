#%RAML 1.0
title: Jar Notes REST Services API using Data Types
version: v1
protocols: [ HTTPS ] 
baseUri: http://localhost:8081/{version}
mediaType: application/json
types:
  Notes:
    type: object
    properties: 
      noteId: string
      noteTitle: string
      noteContent: string
      tagsId: string[]
      folderId: string
  Folders:
    type: object
    properties:
      folderId: string
      name: string
  Tags:
    type: object
    properties:
      tagId: string
      name: string
   Error:
    properties:
      code: integer
      message: string
#/NOTES GET, POST & PUT 
/notes:
  get:
    description: Method used to list all notes matching query criteria, if provided; otherwise list all notes
    queryParameters:
      noteTitle?: string
    responses: 
      200:
        body:
          application/json:
            type: Notes[]
            example: [{"noteId": "1", "noteTitle": "Nota 1","noteContent": "Bla bla ba.","tagsIds": ["1", "2"],"folderId":"1" }, { "noteId": "2", "noteTitle": "Nota 2","noteContent": "A Congrsaxasasdsadsim.","tagsIds": ["1", "2"],"folderId":"1"}]
  post: 
    description: Method used to add a new note.
    body:
      application/json:
        type: Note
        example: { "noteId": "1", "noteTitle": "Nota 1",  "noteContent": "Bla bla ba.", "tagsIds": ["1", "2"],"folderId":"1" }
    responses:
      201:
        body:
          application/json:
            type: Note
            example: { "noteId": "1", "noteTitle": "Nota 1",  "noteContent": "Bla bla ba.", "tagsIds": ["1", "2"],"folderId":"1" }
  #/NOTES/IDNOTES GET, PUT & DELETE
  /{noteId}:
    get:
      description: Method used to get a specific note according to its ID.
      responses:
        200:
          body:
            application/json:
              type: Notes
              example: {"noteId": "1", "noteTitle": "Nota 1","noteContent": "Bla bla ba.","tagsIds": ["1", "2"],"folderId":"1" }
        404:
          body:
            application/json:
              type: Error
              example: { "message" : "Note not found", "code" : 1001 }

      put:
        description: Update a Note according to its ID.
        body:
          application/json:
            type: Notes
            example: {"noteId": "1", "noteTitle": "Nota 1","noteContent": "Bla bla ba.","tagsIds": ["1", "2"],"folderId":"1" }
        responses:
          200:
            body:
              application/json:
                type: Notes
                example: {"noteId": "1", "noteTitle": "Nota 1","noteContent": "Bla bla ba.","tagsIds": ["1", "2"],"folderId":"1" }
          404:
            body:
              application/json:
                type: Error
                example: { "message" : "Note not found", "code" : 1001 }
    delete:  
      description: Method used to delete a specific note according to its ID.
  #/NOTES/IDNOTES GET
  /noteTitle/{noteTitle}:
    get:
      description: Method used to get all the notes that matched the title of the note being specified in the api
      responses:
        200:
          body:
            application/json:
              type: Notes[]
              example: [{"noteId": "1", "noteTitle": "Nota 1","noteContent": "Bla bla ba.","tagsIds": ["1", "2"],"folderId":"1" }, { "noteId": "2", "noteTitle": "Nota 2","noteContent": "A Congrsaxasasdsadsim.","tagsIds": ["1", "2"],"folderId":"1"}]
        404:
          body:
            application/json:
              type: Error
              example: { "message" : "Note not found", "code" : 1001 }
  /tagId/{tagId}:
      responses:
        200:
          body:
            application/json:
              type: Notes[]
              example: [{"noteId": "1", "noteTitle": "Nota 1","noteContent": "Bla bla ba.","tagsIds": ["1", "2"],"folderId":"1" }, { "noteId": "2", "noteTitle": "Nota 2","noteContent": "A Congrsaxasasdsadsim.","tagsIds": ["1", "2"],"folderId":"1"}]
/folders:
  get:
    description: List the folder matching query criteria, if provided; otherwise list all folders
    queryParameters:
      name?: string
    responses: 
      200:
        body:
          application/json:
            type: Folders[]
            example: [{"folderId": "1", "name": "Folder Mates"}, {"folderId": "2", "name": "Folder Rojo"}]
  post: 
    description: Method used to add a new folder.
    body:
      application/json:
        type: Note
        example: {"folderId": "1","name": "Folder Mates" }
    responses:
      201:
        body:
          application/json:
            type: Note
            example: {"folderId": "1","name": "Folder Mates" }
      404:
        body:
          application/json:
            type: Error
            example: { "message" : "Not found", "code" : 1001 }
  /{folderId}:
    get:
      description: Method used to retrieve a specific folder according to its ID.
      responses:
        200:
          body:
            application/json:
              type: Folders
              example: {"folderId": "1", "name": "Folder Mates"}
        404:
          body:
            application/json:
              type: Error
              example: { "message" : "Folder not found", "code" : 1001 }
    patch:
      description: Method used to update a specific folder according to its ID.
    delete:  
      description: Method used to delete a specific folder according to its ID.
  /{name}:
    get:
      description: Method used to retrieve a specific folder according to its name.
      responses:
        200:
          body:
            application/json:
              type: Folders
              example: {"folderId": "1", "name": "Folder Mates"}
        404:
          body:
            application/json:
              type: Error
              example: { "message" : "Folder not found", "code" : 1001 }
/tags: 
  get: 
    description: List the tag matching query criteria, if provided; otherwise list all tags
    queryParameters:
      name?: string
    responses: 
        200:
          body:
            application/json:
              type: Tags[]
              example: [{"tagId": "1", "name": "Tag 1"}, {"tagId": "2", "name": "Tag 2"}]
  /{tagId}:
      get:
        description: Method used to get a specific tag according to its ID
        responses:
          200:
            body:
              application/json:
                type: Tags
                example: {"tagId": "1", "name": "Tag 1"}
          404:
            body:
              application/json:
                type: Error
                example: { "message" : "Tag not found", "code" : 1001 }
  /{name}:
    get:
       description: Method used to get a specific tag according to its name
        responses:
          200:
            body:
              application/json:
                type: Tags
                example: {"tagId": "1", "name": "Tag 1"}
          404:
            body:
              application/json:
                type: Error
                example: { "message" : "Tag not found", "code" : 1001 }




